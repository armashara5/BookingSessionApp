// <auto-generated />
using System;
using InfrastructureLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PresentationSecureApi.Migrations
{
    [DbContext(typeof(InfrastructureDbContext))]
    [Migration("20230905203322_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InfrastructureLayer.DbModels.AvailabilityDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("EndTimeHours")
                        .HasColumnType("int");

                    b.Property<int>("EndTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StartTimeHours")
                        .HasColumnType("int");

                    b.Property<int>("StartTimeMinutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Availabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOfWeek = 0,
                            EndTimeHours = 21,
                            EndTimeMinutes = 0,
                            InstructorId = "1",
                            StartTimeHours = 11,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 2,
                            DayOfWeek = 1,
                            EndTimeHours = 21,
                            EndTimeMinutes = 0,
                            InstructorId = "1",
                            StartTimeHours = 11,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 3,
                            DayOfWeek = 2,
                            EndTimeHours = 21,
                            EndTimeMinutes = 0,
                            InstructorId = "1",
                            StartTimeHours = 11,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 4,
                            DayOfWeek = 3,
                            EndTimeHours = 21,
                            EndTimeMinutes = 0,
                            InstructorId = "1",
                            StartTimeHours = 11,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 5,
                            DayOfWeek = 4,
                            EndTimeHours = 21,
                            EndTimeMinutes = 0,
                            InstructorId = "1",
                            StartTimeHours = 11,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 6,
                            DayOfWeek = 6,
                            EndTimeHours = 21,
                            EndTimeMinutes = 0,
                            InstructorId = "1",
                            StartTimeHours = 11,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 7,
                            DayOfWeek = 0,
                            EndTimeHours = 21,
                            EndTimeMinutes = 0,
                            InstructorId = "2",
                            StartTimeHours = 16,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 8,
                            DayOfWeek = 1,
                            EndTimeHours = 21,
                            EndTimeMinutes = 0,
                            InstructorId = "2",
                            StartTimeHours = 16,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 9,
                            DayOfWeek = 2,
                            EndTimeHours = 21,
                            EndTimeMinutes = 0,
                            InstructorId = "2",
                            StartTimeHours = 16,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 10,
                            DayOfWeek = 3,
                            EndTimeHours = 21,
                            EndTimeMinutes = 0,
                            InstructorId = "2",
                            StartTimeHours = 16,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 11,
                            DayOfWeek = 4,
                            EndTimeHours = 21,
                            EndTimeMinutes = 0,
                            InstructorId = "2",
                            StartTimeHours = 16,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 12,
                            DayOfWeek = 6,
                            EndTimeHours = 21,
                            EndTimeMinutes = 0,
                            InstructorId = "2",
                            StartTimeHours = 16,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 13,
                            DayOfWeek = 1,
                            EndTimeHours = 23,
                            EndTimeMinutes = 0,
                            InstructorId = "3",
                            StartTimeHours = 17,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 14,
                            DayOfWeek = 2,
                            EndTimeHours = 23,
                            EndTimeMinutes = 0,
                            InstructorId = "3",
                            StartTimeHours = 17,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 15,
                            DayOfWeek = 3,
                            EndTimeHours = 23,
                            EndTimeMinutes = 0,
                            InstructorId = "3",
                            StartTimeHours = 17,
                            StartTimeMinutes = 0
                        },
                        new
                        {
                            Id = 16,
                            DayOfWeek = 6,
                            EndTimeHours = 22,
                            EndTimeMinutes = 0,
                            InstructorId = "3",
                            StartTimeHours = 10,
                            StartTimeMinutes = 0
                        });
                });

            modelBuilder.Entity("InfrastructureLayer.DbModels.InstructorDbModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Email = "ali@test.com",
                            Name = "Ali"
                        },
                        new
                        {
                            Id = "2",
                            Email = "sam@test.com",
                            Name = "Sam"
                        },
                        new
                        {
                            Id = "3",
                            Email = "zak@test.com",
                            Name = "Zak"
                        });
                });

            modelBuilder.Entity("InfrastructureLayer.DbModels.SessionDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LengthInMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("InfrastructureLayer.DbModels.StudentDbModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InfrastructureLayer.DbModels.AvailabilityDbModel", b =>
                {
                    b.HasOne("InfrastructureLayer.DbModels.InstructorDbModel", "Instructor")
                        .WithMany("Availabilities")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("InfrastructureLayer.DbModels.SessionDbModel", b =>
                {
                    b.HasOne("InfrastructureLayer.DbModels.InstructorDbModel", "Instructor")
                        .WithMany("Sessions")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfrastructureLayer.DbModels.StudentDbModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InfrastructureLayer.DbModels.InstructorDbModel", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
